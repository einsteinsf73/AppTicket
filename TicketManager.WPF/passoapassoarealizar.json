{
  "plano_de_acao": [
    {
      "fase": "Fase 1: Preparação e Introdução da Injeção de Dependência (DI)",
      "objetivo": "Estabelecer a base para a DI e o logging estruturado (Serilog) sem alterar a lógica de UI existente. Manter todas as funcionalidades atuais.",
      "passos": [
        {
          "id": "1.1",
          "titulo": "Adicionar pacotes NuGet para DI e Serilog",
          "detalhes": "Instalar Microsoft.Extensions.Hosting, Serilog, Serilog.Sinks.Console, Serilog.Sinks.File, Serilog.Extensions.Hosting. Isso permitirá configurar um Generic Host e o logging estruturado.",
          "arquivos_afetados": ["TicketManager.WPF.csproj"],
          "comandos_shell": ["dotnet add package Microsoft.Extensions.Hosting", "dotnet add package Serilog", "dotnet add package Serilog.Sinks.Console", "dotnet add package Serilog.Sinks.File", "dotnet add package Serilog.Extensions.Hosting"],
          "verificacao": "Verificar se os pacotes foram adicionados ao arquivo .csproj."
        },
        {
          "id": "1.2",
          "titulo": "Configurar Generic Host e Serilog no App.xaml.cs",
          "detalhes": "Reestruturar o App.xaml.cs para usar um Generic Host. Isso centralizará a configuração de serviços (DI) e o Serilog. A lógica de inicialização da MainWindow será movida para o Host. O Serilog será configurado para console e arquivo.",
          "arquivos_afetados": ["App.xaml.cs", "App.xaml"],
          "modificacoes_app_xaml_cs": [
            "Adicionar usings para Microsoft.Extensions.Hosting, Serilog, etc.",
            "Criar IHost _host no App class.",
            "No construtor de App(), configurar e construir o IHost, incluindo Serilog e registro de TicketContext.",
            "No OnStartup(), iniciar o host, obter MainWindow via DI e exibi-la.",
            "No OnExit(), parar e descartar o host."
          ],
          "modificacoes_app_xaml": "Remover StartupUri=\"MainWindow.xaml\" para que o Host controle a inicialização.",
          "verificacao": "A aplicação deve iniciar normalmente, e logs devem ser gerados no console e em arquivos (pasta logs/)."
        }
      ]
    },
    {
      "fase": "Fase 2: Implementação do Padrão MVVM (Base) e Camada de Dados",
      "objetivo": "Introduzir as classes base do MVVM e o padrão Repository para abstrair o acesso a dados, preparando para a refatoração da UI.",
      "impacto": "Criação de novas classes e interfaces. Nenhuma alteração na UI existente ainda.",
      "passos": [
        {
          "id": "2.1",
          "titulo": "Criar ViewModelBase e RelayCommand",
          "detalhes": "Criar as classes ViewModelBase (implementa INotifyPropertyChanged) e RelayCommand (implementa ICommand) em uma nova pasta ViewModels. Estas são a base para o MVVM.",
          "arquivos_criados": ["ViewModels/ViewModelBase.cs", "ViewModels/RelayCommand.cs"],
          "verificacao": "Arquivos criados e compilam sem erros."
        },
        {
          "id": "2.2",
          "titulo": "Criar ITicketRepository e TicketRepository",
          "detalhes": "Definir a interface ITicketRepository na pasta Data com métodos CRUD assíncronos para Ticket. Implementar TicketRepository que usa TicketContext. Isso abstrai o acesso a dados.",
          "arquivos_criados": ["Data/ITicketRepository.cs", "Data/TicketRepository.cs"],
          "verificacao": "Arquivos criados e compilam sem erros."
        },
        {
          "id": "2.3",
          "titulo": "Registrar ITicketRepository no DI",
          "detalhes": "Adicionar o registro de ITicketRepository e TicketRepository como scoped services no ConfigureServices do App.xaml.cs.",
          "arquivos_afetados": ["App.xaml.cs"],
          "modificacoes": "services.AddScoped<ITicketRepository, TicketRepository>();",
          "verificacao": "Aplicação compila sem erros."
        }
      ]
    },
    {
      "fase": "Fase 3: Migração da MainWindow para MVVM (Funcionalidades Atuais)",
      "objetivo": "Refatorar a MainWindow para usar o MainViewModel, replicando todas as funcionalidades existentes (filtros, atalho 'h', botões de ação, temas, duplo-clique).",
      "impacto": "Grande refatoração da MainWindow.xaml e MainWindow.xaml.cs. Lógica movida para MainViewModel.",
      "passos": [
        {
          "id": "3.1",
          "titulo": "Criar MainViewModel",
          "detalhes": "Criar a classe MainViewModel na pasta ViewModels. Ela injetará ITicketRepository e conterá as propriedades para a lista de tickets, filtros, e comandos.",
          "arquivos_criados": ["ViewModels/MainViewModel.cs"],
          "verificacao": "Arquivo criado e compila sem erros."
        },
        {
          "id": "3.2",
          "titulo": "Registrar MainViewModel no DI",
          "detalhes": "Adicionar o registro de MainViewModel como transient service no ConfigureServices do App.xaml.cs.",
          "arquivos_afetados": ["App.xaml.cs"],
          "modificacoes": "services.AddTransient<MainViewModel>();",
          "verificacao": "Aplicação compila sem erros."
        },
        {
          "id": "3.3",
          "titulo": "Refatorar MainWindow.xaml.cs para usar MainViewModel",
          "detalhes": "Modificar o construtor da MainWindow para injetar MainViewModel e definir como DataContext. Mover a chamada LoadTickets() para o Loaded event da janela.",
          "arquivos_afetados": ["MainWindow.xaml.cs"],
          "modificacoes": [
            "Remover _context e _isAdmin.",
            "Injetar MainViewModel no construtor.",
            "Definir DataContext = _viewModel.",
            "Mover LoadTickets() para _viewModel.LoadTicketsAsync() no Loaded event."
          ],
          "verificacao": "Aplicação compila sem erros."
        },
        {
          "id": "3.4",
          "titulo": "Migrar lógica de filtros para MainViewModel",
          "detalhes": "Mover as propriedades StatusOptions, PriorityOptions, SelectedStatus, SelectedPriority, StartDateFilter, EndDateFilter e o método ApplyFilter() do code-behind para o MainViewModel.",
          "arquivos_afetados": ["MainWindow.xaml.cs", "ViewModels/MainViewModel.cs"],
          "modificacoes_main_view_model": [
            "Adicionar propriedades de filtro e o método ApplyFilter().",
            "Adicionar FilterCommand e ClearFilterCommand."
          ],
          "modificacoes_main_window_cs": [
            "Remover InitializeFilters().",
            "Remover LoadTickets().",
            "Remover FilterButton_Click() e ClearFilterButton_Click()."
          ],
          "verificacao": "Aplicação compila. Filtros ainda não estarão conectados no XAML."
        },
        {
          "id": "3.5",
          "titulo": "Atualizar MainWindow.xaml para filtros e atalho 'h'",
          "detalhes": "Conectar os controles de filtro (ComboBoxes, DatePickers) às propriedades do MainViewModel. Conectar o botão 'Filtrar' ao FilterCommand. Adicionar o manipulador de evento DatePicker_PreviewKeyDown para o atalho 'h'.",
          "arquivos_afetados": ["MainWindow.xaml"],
          "modificacoes": [
            "ComboBoxes: ItemsSource e SelectedItem para as propriedades do ViewModel.",
            "DatePickers: SelectedDate para as propriedades do ViewModel, PreviewKeyDown para o handler.",
            "FilterButton: Command para FilterCommand."
          ],
          "verificacao": "Filtros de status, prioridade e data devem funcionar. Atalho 'h' deve funcionar. Botão 'Limpar' ainda não funcionará."
        },
        {
          "id": "3.6",
          "titulo": "Restaurar funcionalidade de botões de ação (Novo, Editar, Excluir, Reabrir, Visualizar)",
          "detalhes": "Criar IWindowService e WindowService para gerenciar a abertura de janelas. Implementar comandos no MainViewModel para cada botão de ação, usando o IWindowService e o ITicketRepository. Conectar os botões no XAML aos comandos.",
          "arquivos_afetados": ["Services/IWindowService.cs", "Services/WindowService.cs", "App.xaml.cs", "ViewModels/MainViewModel.cs", "MainWindow.xaml", "MainWindow.xaml.cs", "TicketWindow.xaml.cs", "ViewTicketWindow.xaml.cs", "ReopenReasonWindow.xaml.cs"],
          "modificacoes_detalhadas": [
            "IWindowService: Métodos ShowViewTicketWindow, ShowReopenReasonWindow, ShowNewTicketWindow, ShowTicketWindow, ShowConfirmationDialog.",
            "WindowService: Implementação dos métodos do IWindowService, usando DI para criar janelas.",
            "App.xaml.cs: Registrar IWindowService, WindowService, ViewTicketWindow, ReopenReasonWindow, TicketWindow.",
            "MainViewModel.cs: Injetar IWindowService. Criar NewTicketCommand, OpenTicketDetailsCommand, EditTicketCommand, DeleteTicketCommand, ReopenTicketCommand. Implementar lógica de validação de status e reabertura.",
            "MainWindow.xaml: Conectar botões aos comandos. Adicionar InputBinding para duplo-clique.",
            "MainWindow.xaml.cs: Remover Click handlers dos botões. Adicionar DatePicker_PreviewKeyDown. Adicionar lógica de tema.",
            "TicketWindow.xaml.cs: Refatorar para ter um método LoadTicket(Ticket) e um construtor sem ticket para 'novo'.",
            "ViewTicketWindow.xaml.cs: Refatorar para ter um método LoadTicket(Ticket)."
          ],
          "verificacao": "Todos os botões de ação e o duplo-clique devem funcionar como antes, com a lógica de reabertura e edição correta. O botão 'Fechar' da visualização deve funcionar."
        },
        {
          "id": "3.7",
          "titulo": "Restaurar funcionalidade de Exportar para Excel",
          "detalhes": "Criar IExcelExportService e ExcelExportService (usando ClosedXML). Implementar ExportToExcelCommand no MainViewModel. Conectar o botão no XAML.",
          "arquivos_afetados": ["Services/IExcelExportService.cs", "Services/ExcelExportService.cs", "App.xaml.cs", "ViewModels/MainViewModel.cs", "MainWindow.xaml", "MainWindow.xaml.cs"],
          "verificacao": "Botão 'Exportar para Excel' deve gerar um arquivo .xlsx com os dados da grade."
        },
        {
          "id": "3.8",
          "titulo": "Restaurar funcionalidade de Configurações",
          "detalhes": "Criar SettingsCommand no MainViewModel. Conectar o botão no XAML. Implementar a lógica de abertura da SettingsWindow.",
          "arquivos_afetados": ["App.xaml.cs", "ViewModels/MainViewModel.cs", "MainWindow.xaml", "MainWindow.xaml.cs"],
          "verificacao": "Botão 'Configurações' deve abrir a janela de configurações."
        },
        {
          "id": "3.9",
          "titulo": "Restaurar funcionalidade de Limpar Filtros",
          "detalhes": "Criar ClearFilterCommand no MainViewModel. Conectar o botão no XAML. Implementar a lógica de resetar os filtros e chamar ApplyFilter().",
          "arquivos_afetados": ["ViewModels/MainViewModel.cs", "MainWindow.xaml"],
          "verificacao": "Botão 'Limpar' deve resetar todos os filtros e atualizar a grade."
        }
      ]
    },
    {
      "fase": "Fase 4: Implementação da Concorrência Otimista (R04)",
      "objetivo": "Adicionar o token de concorrência (RowVersion) e o tratamento de conflitos para evitar perda de dados em edições simultâneas.",
      "impacto": "Modificações no modelo Ticket, no DbContext e na camada de dados.",
      "passos": [
        {
          "id": "4.1",
          "titulo": "Adicionar RowVersion ao modelo Ticket",
          "detalhes": "Adicionar a propriedade byte[]? RowVersion com [Timestamp] ao Ticket.cs.",
          "arquivos_afetados": ["Models/Ticket.cs"],
          "verificacao": "Aplicação compila sem erros."
        },
        {
          "id": "4.2",
          "titulo": "Configurar RowVersion no TicketContext para Oracle",
          "detalhes": "No OnModelCreating do TicketContext, configurar a propriedade RowVersion como IsRowVersion() e HasColumnName(\"ROW_VERSION\") para Oracle.",
          "arquivos_afetados": ["Data/TicketContext.cs"],
          "verificacoes": "Aplicação compila sem erros."
        },
        {
          "id": "4.3",
          "titulo": "Gerar e Aplicar Migração para RowVersion",
          "detalhes": "Remover migrações pendentes (se houver). Gerar uma nova migração para adicionar a coluna ROW_VERSION. Aplicar a migração ao banco de dados. Se houver dados, a coluna deve ser adicionada como anulável e depois preenchida com um valor padrão (via SQL bruto, se necessário).",
          "comandos_shell": ["dotnet ef migrations remove", "dotnet ef migrations add AddRowVersionToTicket", "dotnet ef database update"],
          "verificacao": "Coluna ROW_VERSION deve existir na tabela TICKETS no banco de dados."
        },
        {
          "id": "4.4",
          "titulo": "Implementar tratamento de DbUpdateConcurrencyException",
          "detalhes": "No TicketRepository.SaveChangesAsync(), adicionar um bloco try-catch para DbUpdateConcurrencyException. Informar o usuário sobre o conflito e sugerir recarregar/mesclar.",
          "arquivos_afetados": ["Data/TicketRepository.cs"],
          "verificacao": "Testar cenário de edição simultânea para verificar se a exceção é capturada e o usuário é notificado."
        }
      ]
    },
    {
      "fase": "Fase 5: Refatoração de Outras Janelas (Incremental)",
      "objetivo": "Migrar outras janelas (TicketWindow, ViewTicketWindow, ReopenReasonWindow, SlaConfirmationWindow, SettingsWindow) para o padrão MVVM, uma por uma.",
      "impacto": "Refatoração gradual das janelas secundárias, movendo lógica para ViewModels dedicados.",
      "passos": [
        {
          "id": "5.1",
          "titulo": "Refatorar TicketWindow para MVVM",
          "detalhes": "Criar TicketViewModel.cs. Mover a lógica de SaveButton_Click, StatusComboBox_SelectionChanged e ComboBox_PreviewKeyDown para o ViewModel. Conectar o XAML ao ViewModel.",
          "arquivos_afetados": ["TicketWindow.xaml", "TicketWindow.xaml.cs", "ViewModels/TicketViewModel.cs"],
          "verificacao": "Janela de ticket funciona via MVVM."
        },
        {
          "id": "5.2",
          "titulo": "Refatorar ViewTicketWindow para MVVM",
          "detalhes": "Criar ViewTicketViewModel.cs. Mover a lógica de carregamento e exibição para o ViewModel. Conectar o XAML ao ViewModel.",
          "arquivos_afetados": ["ViewTicketWindow.xaml", "ViewTicketWindow.xaml.cs", "ViewModels/ViewTicketViewModel.cs"],
          "verificacao": "Janela de visualização funciona via MVVM."
        }
      ]
    }
  ]
}
